// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model user {
    id                         String                       @id @default(uuid()) @db.Char(36)
    email                      String                       @unique @db.VarChar(50)
    nickname                   String                       @db.VarChar(20)
    provider                   Int                          @db.UnsignedTinyInt
    profileImageUrl            String?                      @db.VarChar(300)
    introduction               String?                      @db.VarChar(100)
    createdAt                  DateTime                     @default(now()) @db.Timestamp(0)
    updatedAt                  DateTime                     @default(now()) @db.Timestamp(0)
    recipePosts                recipePost[]
    recipePostLikeUserRelation recipePostLikeUserRelation[]
    recipePostComment          recipePostComment[]
    foodPost                   foodPost[]
    foodPostLikeUserRelation   foodPostLikeUserRelation[]
}

model recipePost {
    id           Int      @id @default(autoincrement()) @db.UnsignedInt
    title        String   @db.VarChar(50)
    content      String   @db.LongText
    thumbnailUrl String   @db.VarChar(300)
    category     Int      @db.UnsignedTinyInt
    viewCount    Int      @default(0) @db.UnsignedInt
    createdAt    DateTime @default(now()) @db.Timestamp(0)
    updatedAt    DateTime @default(now()) @db.Timestamp(0)

    author   user   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    authorId String @db.Char(36)

    recipePostLikeUserRelation recipePostLikeUserRelation[]
    recipePostTagReltaion      recipePostTagReltaion[]
    recipePostComment          recipePostComment[]
}

model recipePostComment {
    id           Int                 @id @default(autoincrement()) @db.UnsignedInt
    comment      String              @db.VarChar(300)
    createdAt    DateTime            @default(now()) @db.Timestamp(0)
    updatedAt    DateTime            @default(now()) @db.Timestamp(0)
    deletedAt    DateTime?           @db.Timestamp(0)
    parentId     Int?                @db.UnsignedInt
    children     recipePostComment[] @relation("ParentComment") // 대댓글 관계
    parent       recipePostComment?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction) // 부모 댓글 관계
    writer       user?               @relation(fields: [writerId], references: [id])
    writerId     String?             @db.Char(36)
    recipePostId Int                 @db.UnsignedInt
    recipePost   recipePost          @relation(fields: [recipePostId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recipePostLikeUserRelation {
    userId       String     @db.Char(36)
    recipePostId Int        @db.UnsignedInt
    createdAt    DateTime   @default(now()) @db.Timestamp(0)
    user         user       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    recipePost   recipePost @relation(fields: [recipePostId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([userId, recipePostId])
}

model recipePostTag {
    id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
    title                 String                  @unique @db.VarChar(30)
    createdAt             DateTime                @default(now()) @db.Timestamp(0)
    recipePostTagReltaion recipePostTagReltaion[]
}

model recipePostTagReltaion {
    recipePostId    Int           @db.UnsignedInt
    recipePostTagId Int           @db.UnsignedInt
    createdAt       DateTime
    recipePostTag   recipePostTag @relation(fields: [recipePostTagId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    recipePost      recipePost    @relation(fields: [recipePostId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([recipePostId, recipePostTagId])
}

model foodPost {
    id           Int      @id @default(autoincrement()) @db.UnsignedInt
    mainImageUrl String   @db.VarChar(300)
    description  String?  @db.VarChar(300)
    viewCount    Int      @default(0) @db.UnsignedInt
    createdAt    DateTime @default(now()) @db.Timestamp(0)
    updatedAt    DateTime @default(now()) @db.Timestamp(0)

    author                   user                       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    authorId                 String                     @db.Char(36)
    foodPostTagReltaion      foodPostTagReltaion[]
    foodPostLikeUserRelation foodPostLikeUserRelation[]
    foodPostImages           foodPostImage[]
}

model foodPostImage {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    url       String   @db.VarChar(300)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @default(now()) @db.Timestamp(0)

    foodPostId Int      @db.UnsignedInt
    foodPost   foodPost @relation(fields: [foodPostId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model foodPostTag {
    id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
    title               String                @unique @db.VarChar(30)
    createdAt           DateTime              @default(now()) @db.Timestamp(0)
    foodPostTagReltaion foodPostTagReltaion[]
}

model foodPostTagReltaion {
    foodPostId    Int         @db.UnsignedInt
    foodPostTagId Int         @db.UnsignedInt
    createdAt     DateTime
    foodPostTag   foodPostTag @relation(fields: [foodPostTagId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    foodPost      foodPost    @relation(fields: [foodPostId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([foodPostId, foodPostTagId])
}

model foodPostLikeUserRelation {
    userId     String   @db.Char(36)
    foodPostId Int      @db.UnsignedInt
    createdAt  DateTime @default(now()) @db.Timestamp(0)
    user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    foodPost   foodPost @relation(fields: [foodPostId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([userId, foodPostId])
}

model errorLog {
    id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    method       String   @db.VarChar(10)
    url          String   @db.VarChar(300)
    errorCode    Int      @db.UnsignedSmallInt
    errorMessage String   @db.VarChar(300)
    controller   String?  @db.VarChar(3000)
    handler      String?  @db.VarChar(30)
    request      String?  @db.VarChar(3000)
    reason       String?  @db.VarChar(3000)
    userId       String?  @db.Char(36)
    createdAt    DateTime @default(now()) @db.Timestamp(6)
}
